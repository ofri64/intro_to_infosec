The process of solving this question was quite long. I will try to explain the main milestones along the way:
- First step was the understand the entire flow of the program and specificaly the readfile method which interests us most.
- Second we have to identify the offsets of the dead zones in the code using IDA:
    small_dead_zone_begin_offset = 0x633
    small_dead_zone_end_offset = 0x63A
    large_dead_zone_begin_offset = 0x5CD
    large_dead_zone_end_offset = 0x631
- The small deadzone is only 7 bytes long. so we have to redirect from it to the large dead zone which consists of 100 bytes. So we want to jump from the small dead zone to the large one.
- Noticing that we must pass through the large dead zone as part of the regular flow of the program, we must "jump over" our patched logic and not execute it before the line is read from the file (before the function fgets).
- In order to implement the above, the lagre dead zone will begin with a jump to the end of the large dead zone, and from the small dead zone we won't jump to the beginnig of the large dead zone. 
- Instead we will jump 7 btyes after to the address 0x080485D4
- All that is left now is to write the assembly code for the patched logic:
	- Extract the line content from the stack at address ebp-0x40c
	- Compare the two first bytes - if they don't match a command jump back to the end of the small dead zone, before printf is performed
	- If it is a command - save the argumnt on the stack and call the system library function which can be found at address 0x08048460. after the function return jump straight to the end of the large dead zone (no need to perform the printf operation)